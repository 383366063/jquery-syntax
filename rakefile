# 
#	This file is part of the "jQuery.Syntax" project, and is licensed under the GNU AGPLv3.
#
#	See <jquery.syntax.js> for licensing details.
#
#	Copyright 2010 Samuel Williams. All rights reserved.
#

require 'stringio'
require 'fileutils'
require 'tmpdir'

JSMIN_EXEC = File.dirname(__FILE__) + "/ext/jsmin.rb"
CACHE_FILE = "jquery.syntax.cache.js"
MINIFIED_FILE = "jquery.syntax.min.js"
LICENSE = <<EOF
// This file is part of the "jQuery.Syntax" project, and is licensed under the GNU AGPLv3.
// Copyright 2010 Samuel Williams. All rights reserved.
// For more information, please see <http://www.oriontransfer.co.nz/software/jquery-syntax>
EOF

task :update_aliases do
	code = StringIO.new
	
	code.puts "// This file is automatically generated. Any changes may be lost."
	code.puts "// The following declarations describes all resources that might be loaded dynamically."
	code.puts
	
	code.puts "// Brush Aliases"
	Dir["jquery.syntax.brush.*.js"].each do |path|
		File.open(path, "r") do |f|
			first_line = f.readline rescue ""
			
			if first_line.match(/^\/\/ brush: (.+?) aliases: (.+)$/)
				code.puts "Syntax.alias(#{$1}, #{$2});"
			end
		end
	end
	
	code.puts
	code.puts "// CSS Extensions"
	Dir["jquery.syntax.*.css"].each do |path|
		basename = File.basename(path, ".css")
		code.puts "Syntax.styles[#{basename.dump}] = #{path.dump};"
	end
	
	File.open(CACHE_FILE, "w") do |f|
		f.write(code.string)
	end
	
	puts "*** Written updated cache file #{CACHE_FILE} ***"
	puts code.string
end

task :clean_css do
	Dir.glob(File.join(File.dirname(__FILE__), "jquery.syntax.*.css")) do |path|
		FileUtils.rm path, :verbose => true
	end
end

class Theme
	def initialize(dst_dir, root = nil)
		@destination = dst_dir
		
		@includes = []
		@root = root || File.join(File.dirname(__FILE__), "themes")
		
		@extends = {}
	end
	
	attr :includes
	
	def load_theme(theme_dir)
		# Themes which are relative paths are designed to reside in the themes subdirectory.
		unless File.directory?(theme_dir)
			theme_dir = File.join(@root, theme_dir)
		end
	
		unless File.directory?(theme_dir)
			raise StandardError.new("Could not find theme #{theme_dir}!")
		end
	
		$stderr.puts "Loading theme from #{theme_dir}..."
		theme_config_path = File.join(theme_dir, "config.yaml")
		config = {}
	
		# Is there a configuration file?
		if File.exist? theme_config_path
			config = YAML::load_file(theme_config_path)
		end
	
		# Load any dependencies recursively - if you have bad configuration this might
		# give you visions of infinity.
		if config['depends']
			config['depends'].each {|name| load_theme(name)}
		end
		
		if config['extends']
			config['extends'].each {|name,extension| @extends[name] = extension}
		end
		
		if config['includes']
			@includes.concat(config['includes'])
		end
	
		# Copy all the theme files
		FileUtils.cp_r(Dir.glob(theme_dir + "/*"), @destination)
	
		# Remove any files/directories that have been excluded
		if config['exclude']
			config['exclude'].each do |name|
				FileUtils.rm_rf(File.join(@destination, name))
			end
		end
	end
	
	def includes_for(path)
		if extension = @extends[File.basename(path)]
			return @includes + [extension]
		else
			return @includes
		end
	end
end

task :generate_css, [:theme,:override,:output] => [:clean_css] do |task, arguments|
	theme = arguments[:theme] || "base"
	override = arguments[:override] || "master.sass"
	
	puts "Building CSS: #{theme}/#{override}"
	
	output = arguments[:output] || File.dirname(__FILE__)
	
	theme_tmp = File.join(Dir.tmpdir, "jQuery.Syntax-#{Time.now.to_i}")
	FileUtils.mkdir_p(theme_tmp)
	
	aggregate_theme = Theme.new(theme_tmp)
	aggregate_theme.load_theme(theme)
	
	unless File.exist?(override)
		override = File.join(theme_tmp, override)
	end
	
	unless File.exist?(override)
		raise StandardError.new("Could not find master/override #{override} in #{theme_tmp}.")
	end
	
	aggregate_theme.includes << override
	
	Dir.glob(File.join(theme_tmp, "jquery.syntax.*.sass")) do |sass|
		output_path = File.join(output, File.basename(sass, ".sass") + ".css")
		command = "sass -I #{theme_tmp.dump} --stdin #{output_path}"
		
		$stderr.puts command
		
		IO.popen(command, "w") do |io|
			aggregate_theme.includes_for(sass).each do |incl|
				io.puts("@import #{incl}")
			end
			
			io.puts("@import #{File.basename(sass)}")
			io.close_write
		end
	end
	
	FileUtils.rm_rf(theme_tmp)
	
	Rake::Task[:update_aliases].reenable
	Rake::Task[:update_aliases].invoke
end

# This builds a combined jquery.syntax.js and jquery.syntax.cache.js and minifies the result
task :build_combined => [:update_aliases] do
	IO.popen(JSMIN_EXEC, "r+") do |min|
		["jquery.syntax.js", "jquery.syntax.cache.js"].each do |path|
			min.write(File.read(path))
		end
	
		min.close_write
	
		buf = min.read
	
		File.open(MINIFIED_FILE, "w") do |fp|
			fp.write(LICENSE)
			fp.write(buf)
		end
	end
end

# Note... this is one way !
task :compress_all => [:build_combined] do
	files = Dir[File.dirname(__FILE__) + "/jquery.syntax.*.js"]
	
	files.each do |path|
		IO.popen(JSMIN_EXEC, "r+") do |min|
			min.write(File.read(path))
			
			min.close_write
			
			File.open(path, "w") do |fp|
				fp.write(LICENSE)
				fp.write(min.read)
			end
		end
	end
end

task :default => :build_combined
